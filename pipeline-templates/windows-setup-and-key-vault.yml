steps:
  - task: PowerShell@2
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)\versionnumber.ps1
      arguments: $(Build.SourcesDirectory) $(semanticVersion) $(Build.BuildId) $$(isPrerelease)
    displayName: 'Setting build version'

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'Azure.Infrastructure.CodeSigning'
      KeyVaultName: 'CodeSigningCertificates'
      SecretsFilter: '*'
    displayName: 'Get code signing certificate from Azure Key Vault'
    condition: and(succeeded(), eq(variables.isReleaseBranch, true))

  - powershell: |
        $kvSecretBytes = [System.Convert]::FromBase64String("$(OneIdentity-CodeSigning)")
        $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $certCollection.Import($kvSecretBytes,$null,[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
        $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12,"$(OneIdentity-CodeSigningCertPassword)")
        $certpath = '$(Build.BinariesDirectory)\$(codeSigningCertFileName)'
        Write-Verbose -Verbose $certpath
        [System.IO.File]::WriteAllBytes($certpath, $protectedCertificateBytes)
    displayName: 'Save code signing certificate to PFX file'
    condition: and(succeeded(), eq(variables.isReleaseBranch, true))

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'SafeguardOpenSource'
      KeyVaultName: 'SafeguardBuildSecrets'
      SecretsFilter: 'PowerShellGalleryApiKey'
    displayName: 'Get PowerShell Gallery API key from Sandbox Azure Key Vault'
    condition: and(succeeded(), eq(variables.isReleaseBranch, true))

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'SafeguardOpenSource'
      KeyVaultName: 'SafeguardBuildSecrets'
      SecretsFilter: 'NugetOrgApiKey'
    displayName: 'Get Nuget.Org API key from Sandbox Azure Key Vault'
    condition: and(succeeded(), eq(variables.isReleaseBranch, true))
