steps:
- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: $(System.DefaultWorkingDirectory)\versionnumber.ps1
    arguments: $(Build.SourcesDirectory) $(semanticVersion) $(Build.BuildId) $$(isPrerelease)
  displayName: 'Setting build version'

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: AzureKeyVault@2
  displayName: 'Get code signing certificate from Azure Key Vault'
  inputs:
    # The "Safeguard Privileged Passwords" project in Azure has been setup with a new Connected Service under Project Settings > Service Connections.
    # We may not have permissions to view them, but they are there. And this service connection should then have access to
    # the SPPCodeSigning Key Vault under the OneIdentity.Ops.SaaS.AzureDevOpsInfrastructure subscription, in the CodeSigningCertificates
    # resource group.
    ConnectedServiceName: "OneIdentity.Infrastructure.SPPCodeSigning"
    KeyVaultName: "SPPCodeSigning"
    SecretsFilter: "SPPCodeSigning-Password, SPPCodeSigning-TotpPrivateKey"
  # # PRs from repository forks are not allowed to access secrets in the pipeline. For more information see https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/github?view=azure-devops&tabs=yaml#access-restrictions
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

# SSL.com example:
# https://www.ssl.com/how-to/how-to-integrate-esigner-cka-with-ci-cd-tools-for-automated-code-signing/#ftoc-heading-1
# and click on the Azure Pipeline tab.
- powershell: |
    # Download and unzip eSignerCKA setup. This downloads their latest version, which when unzipped has
    # a file name that also contains the version number. So we need to move it to a known name.
    Invoke-WebRequest -OutFile eSigner_CKA_Setup.zip "https://www.ssl.com/download/ssl-com-esigner-cka"
    Expand-Archive -Force eSigner_CKA_Setup.zip
    Remove-Item eSigner_CKA_Setup.zip
    Move-Item -Path "eSigner_CKA_*\*.exe" -Destination "eSigner_CKA_Installer.exe"
  displayName: "Download and Unzip eSignerCKA Setup"
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- powershell: |
    .\eSigner_CKA_Installer.exe /CURRENTUSER /VERYSILENT /SUPPRESSMSGBOXES /DIR="$(Build.SourcesDirectory)\eSignerCKA" | Out-Null
    dir $(Build.SourcesDirectory)\eSignerCKA
  displayName: "Setup eSignerCKA in silent mode and output installation directory"
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- powershell: |
    $(Build.SourcesDirectory)\eSignerCKA\eSignerCKATool.exe config -mode "product" -user "ssl.oid.safeguardpp@groups.quest.com" -pass "$(SPPCodeSigning-Password)" -totp "$(SPPCodeSigning-TotpPrivateKey)" -key "$(Build.SourcesDirectory)\eSignerCKA\master.key" -r
  displayName: "Configure account information on eSignerCKA using Azure Key Vault values"
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- powershell: |
    $(Build.SourcesDirectory)\eSignerCKA\eSignerCKATool.exe unload
    $(Build.SourcesDirectory)\eSignerCKA\eSignerCKATool.exe load
  displayName: "Unload and load certificate into Windows Certificate Store"
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

# We should now be able to access the certificate using the standard Windows signtool.exe from the Windows SDK,
# which should be installed on the build agent images being used.
#
# Typically, you often see examples of signtool.exe and other things accessing the certificate by the thumbprint.
# And in fact, the sample SSL.com code includes a bunch of extra PowerShell script to get the thumbprint. However,
# signtool.exe can also access the certificate by a partial subject name match. We'll do that here in hopes that
# when the certificate is renewed, the subject name will remain the same, and we won't have to change this.
# "signtool.exe" sign /fd sha256 /tr http://ts.ssl.com /td sha256 /n "One Identity LLC" "C:\path\to\program.exe"

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'SafeguardOpenSource'
    KeyVaultName: 'SafeguardBuildSecrets'
    SecretsFilter: 'PowerShellGalleryApiKey'
  displayName: 'Get PowerShell Gallery API key from Sandbox Azure Key Vault'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'SafeguardOpenSource'
    KeyVaultName: 'SafeguardBuildSecrets'
    SecretsFilter: 'NugetOrgApiKey'
  displayName: 'Get Nuget.Org API key from Sandbox Azure Key Vault'
  condition: and(succeeded(), eq(variables.isReleaseBranch, true))