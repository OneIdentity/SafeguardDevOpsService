# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- phase2

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  setupprojectdir: 'SafeguardDevOpsServiceWix'
  setupproject: '**/$(setupprojectdir)/*.wixproj'
  pluginsdir: 'ExternalPlugins'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  codeSigningCertFileName: 'OneIdentityCodeSigning.pfx'
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/phase2')]

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'Azure.Infrastructure.CodeSigning'
    KeyVaultName: 'CodeSigningCertificates'
    SecretsFilter: '*'
  displayName: 'Get code signing certificate from Azure Key Vault'
  condition: and(succeeded(), eq(variables.isMain, true))

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'env | sort'

- powershell: |
      $kvSecretBytes = [System.Convert]::FromBase64String("$(OneIdentity-CodeSigning)")
      $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
      $certCollection.Import($kvSecretBytes,$null,[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
      $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12,"$(OneIdentity-CodeSigningCertPassword)")
      $certpath = '$(Build.BinariesDirectory)/$(codeSigningCertFileName)'
      Write-Verbose -Verbose $certpath
      [System.IO.File]::WriteAllBytes($certpath, $protectedCertificateBytes)
  displayName: 'Save code signing certificate to PFX file'
  condition: and(succeeded(), eq(variables.isMain, true))

- task: PowerShell@2
  inputs:
    targetType: filePath
    filePath: $(System.DefaultWorkingDirectory)\versionnumber.ps1
    arguments: $(Build.SourcesDirectory) $(Build.BuildId)
    ignoreLASTEXITCODE: true

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:SignFiles=true /p:CertificatePassword=$(OneIdentity-CodeSigningCertPassword) /p:CertificatePath="$(Build.BinariesDirectory)/$(codeSigningCertFileName)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build $(solution) with signing'
  condition: and(succeeded(), eq(variables.isMain, true))

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build $(solution) no signing'
  condition: and(succeeded(), eq(variables.isMain, false))

- task: VSBuild@1
  inputs:
    solution: '$(setupproject)'
    msbuildArgs: '/p:SignFiles=true /p:CertificatePassword=$(OneIdentity-CodeSigningCertPassword) /p:CertificatePath="$(Build.BinariesDirectory)/$(codeSigningCertFileName)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
  displayName: 'Build $(setupproject)'

- task: DeleteFiles@1
  inputs:
    SourceFolder: '$(Build.BinariesDirectory)'
    Contents: '$(codeSigningCertFileName)'
  condition: succeededOrFailed()
  displayName: 'Delete code signing certificate files'  

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\$(setupprojectdir)'
    contents: '**\bin\**'
    targetFolder: $(Build.ArtifactStagingDirectory)
  displayName: 'Copy files to staging folder'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\$(pluginsdir)\bin\$(buildConfiguration)'
    contents: '**'
    targetFolder: $(Build.ArtifactStagingDirectory)\bin\$(buildConfiguration)\$(pluginsdir)
  displayName: 'Copy plugins to staging folder'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'SafeguardDevOpsService' 
  displayName: 'Publishing the artifacts'

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com_bnicholesdell'
    repositoryName: 'OneIdentity/SafeguardDevOpsService'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: '$(Build.BuildNumber)'
    isPreRelease: true
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
    assets: |
      $(Build.ArtifactStagingDirectory)\bin\$(buildConfiguration)\en-us\*.msi
      $(Build.ArtifactStagingDirectory)\bin\$(buildConfiguration)\$(pluginsdir)\*.zip
  displayName: 'Creating and publishing a release to Github'
  condition: and(succeeded(), eq(variables.isMain, true))
