variables:
  - template: pipeline-templates/global-variables.yml
trigger:
  branches:
    include:
      - master
      - release-*
      - multipleplugininstance
  paths:
    exclude:
      - /**/*.md
pr: none
jobs:
  - job:
    displayName: "Windows MSI and Plugin Build"
    variables:
      - template: pipeline-templates/windows-job-variables.yml
    pool:
      vmImage: 'windows-latest'
    steps:
      - template: pipeline-templates/windows-setup-and-key-vault.yml
      - template: pipeline-templates/windows-build-steps.yml
      - task: GitHubRelease@1
        inputs:
          gitHubConnection: 'PangaeaBuild-GitHub'
          repositoryName: 'OneIdentity/SafeguardDevOpsService'
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: 'userSpecifiedTag'
          tag: 'release-$(VersionString)'
          title: '$(VersionString)'
          isPreRelease: $(isPrerelease)
          changeLogCompareToRelease: 'lastFullRelease'
          changeLogType: 'commitBased'
          assets: |
            $(Build.ArtifactStagingDirectory)\bin\$(buildConfiguration)\en-us\*.msi
            $(Build.ArtifactStagingDirectory)\bin\$(buildConfiguration)\$(pluginsDir)\*.zip
        displayName: 'Creating and publishing a release to Github'
        condition: and(succeeded(), eq(variables.isReleaseBranch, true))

      - powershell: Publish-Module -Path $(Build.SourcesDirectory)\safeguard-devops -NuGetApiKey "$(PowerShellGalleryApiKey)" -Verbose -SkipAutomaticTags
        displayName: 'Publish Powershell module to Powershell Gallery'
        condition: and(succeeded(), eq(variables.isReleaseBranch, true))

      - task: NuGetCommand@2
        inputs:
          command: 'custom'
          arguments: 'push $(Build.ArtifactStagingDirectory)\OneIdentity.SafeguardSecretsBroker.PluginCommon.*.nupkg -source https://api.nuget.org/v3/index.json -ApiKey $(NugetOrgApiKey) -NonInteractive -Verbosity detailed'
        displayName: 'Publishing NuGet packages to NuGet.org'
        condition: and(succeeded(), eq(variables.isReleaseBranch, true))

      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)\OneIdentity.SafeguardSecretsBroker.AddonCommon.*.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: 'OneIdentity'
        displayName: 'Publish NuGet packages to Azure DevOps Artifacts'
        condition: and(succeeded(), eq(variables.isReleaseBranch, true))

  - job:
    displayName: "Linux Docker Alpine Build"
    variables:
      imageType: alpine
    pool:
      # This is a bit surprising. According to:
      # https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml
      #   The ubuntu-latest label is in the process of transitioning from ubuntu-22.04 to ubuntu-24.04.
      #   Until the transition is complete, your pipelines using ubuntu-latest might still use ubuntu-22.04.
      # It appears our build is using 24.04, however, if you follow the "Included Software" link on that
      # page for that version, 24.04 doesn't include .NET 9! However, 22.04 does.
      # Note, this is as of May, 2025. Surely things will change, which means this will have to change again.
      vmImage: 'ubuntu-22.04'
    steps:
      - template: pipeline-templates/linux-build-steps.yml
      - task: AzureKeyVault@2
        inputs:
          azureSubscription: 'OneIdentity.RD.SBox.Safeguard-ServiceConnection'
          KeyVaultName: 'SafeguardBuildSecrets'
          SecretsFilter: 'DockerHubAccessToken,DockerHubPassword'
        displayName: 'Get Docker Hub Access Token from Sandbox Azure Key Vault'
        condition: and(succeeded(), eq(variables.isReleaseBranch, true), eq(variables.isPrerelease, false))

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            docker login -u danpetersonoi --password-stdin <<<$(DockerHubAccessToken) 2>/dev/null

            docker tag oneidentity/safeguard-devops:$(VersionString)-alpine3.12 oneidentity/safeguard-devops:$(VersionString)-alpine
            docker tag oneidentity/safeguard-devops:$(VersionString)-alpine3.12 oneidentity/safeguard-devops:latest
            docker push oneidentity/safeguard-devops:$(VersionString)-alpine3.12
            docker push oneidentity/safeguard-devops:$(VersionString)-alpine
            docker push oneidentity/safeguard-devops:latest

            docker logout
          failOnStderr: true
        condition: and(succeeded(), eq(variables.isReleaseBranch, true), eq(variables.isPrerelease, false))
        displayName: 'Pushing docker Alpine image to Docker Hub'

  - job:
    displayName: "Linux Docker Ubuntu Build"
    variables:
        imageType: ubuntu
    pool:
      # See comment above, in the Alpine build section.
      vmImage: 'ubuntu-22.04'
    steps:
      - template: pipeline-templates/linux-build-steps.yml
      - task: AzureKeyVault@2
        inputs:
          azureSubscription: 'OneIdentity.RD.SBox.Safeguard-ServiceConnection'
          KeyVaultName: 'SafeguardBuildSecrets'
          SecretsFilter: 'DockerHubAccessToken,DockerHubPassword'
        displayName: 'Get Docker Hub Access Token from Sandbox Azure Key Vault'
        condition: and(succeeded(), eq(variables.isReleaseBranch, true), eq(variables.isPrerelease, false))

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            docker login -u danpetersonoi --password-stdin <<<$(DockerHubAccessToken) 2>/dev/null

            docker tag oneidentity/safeguard-devops:$(VersionString)-ubuntu20.04 oneidentity/safeguard-devops:$(VersionString)-ubuntu
            docker push oneidentity/safeguard-devops:$(VersionString)-ubuntu20.04
            docker push oneidentity/safeguard-devops:$(VersionString)-ubuntu

            docker logout
          failOnStderr: true
        condition: and(succeeded(), eq(variables.isReleaseBranch, true), eq(variables.isPrerelease, false))
        displayName: 'Pushing docker ubuntu image to Docker Hub'
